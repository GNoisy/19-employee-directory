{"version":3,"sources":["components/Jumbotron/index.js","components/Table/index.js","components/TableData/index.js","App.js","serviceWorker.js","index.js"],"names":["styles","jumboStyle","background","Jumbotron","style","className","Table","props","scope","src","image","name","department","phoneNumber","App","state","employees","allEmployees","filter","event","target","value","setState","employee","sort","employee1","employee2","onChange","this","map","key","id","React","Component","TableData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8kEAEMA,G,MAAS,CACXC,WAAY,CACVC,WAAY,YAgBHC,MAXf,WACE,OACE,yBAAKC,MAAOJ,EAAOC,WAAYI,UAAU,6BACrC,yBAAKA,UAAU,aACX,wBAAIA,UAAU,oCAAd,sBACA,uBAAGA,UAAU,+BAAb,8F,yCCEGC,MAbf,SAAgBC,GACZ,OACI,+BACI,4BACA,wBAAIC,MAAM,OAAM,yBAAKC,IAAKF,EAAMG,SAC5B,gCAAOH,EAAMI,KAAb,KACA,gCAAOJ,EAAMK,WAAb,KACA,gCAAOL,EAAMM,YAAb,QCsGDC,E,4MA3GbC,MAAQ,CACNC,UAAWA,EACXC,aAAcD,G,EAGhBE,OAAS,SAACC,GACR,IAAMP,EAAaO,EAAMC,OAAOC,MACb,KAAfT,EACF,EAAKU,SAAS,CACZN,UAAW,EAAKD,MAAME,aAAaC,QAAO,SAAAK,GACxC,OAAIX,IAAeW,EAASX,gBAQhC,EAAKU,SAAS,CACZN,UAAW,EAAKD,MAAME,gB,EAK5BO,KAAO,SAACL,GAGa,iBAFAA,EAAMC,OAAOC,MAG9B,EAAKC,SAAS,CACZN,UAAW,EAAKD,MAAME,aAAaO,MAAK,SAACC,EAAWC,GAClD,OAAID,EAAUd,KAAOe,EAAUf,KACtB,EAELc,EAAUd,KAAOe,EAAUf,MACrB,EAGH,OAIX,EAAKW,SAAS,CACZN,UAAW,EAAKD,MAAME,aAAaO,MAAK,SAACC,EAAWC,GAClD,OAAID,EAAUd,KAAOe,EAAUf,KACtB,EAELc,EAAUd,KAAOe,EAAUf,MACrB,EAGH,Q,uDAOb,OACE,yBAAKN,UAAU,OACb,6BACE,uDACA,4BAAQsB,SAAUC,KAAKV,QACrB,iCACA,4BAAQG,MAAM,cAAd,cACA,4BAAQA,MAAM,eAAd,eACA,4BAAQA,MAAM,eAAd,eACA,4BAAQA,MAAM,SAAd,WAGJ,6BACE,+CACA,4BAAQM,SAAUC,KAAKJ,MACrB,iCACA,4BAAQH,MAAM,gBAAd,gBACA,4BAAQA,MAAM,WAAd,aASJ,2BAAOhB,UAAU,uBACb,+BACI,4BACA,wBAAIG,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,cACA,wBAAIA,MAAM,OAAV,YAGHoB,KAAKb,MAAMC,UAAUa,KAAI,SAAAN,GAAQ,OAClC,kBAAC,EAAD,CACIO,IAAMP,EAASQ,GACfrB,MAAOa,EAASb,MAChBC,KAAOY,EAASZ,KAChBC,WAAaW,EAASX,WACtBC,YAAcU,EAASV,uB,GAnGrBmB,IAAMC,WCeTnB,MAZf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKT,UAAU,aACb,kBAAC6B,EAAD,SCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ab417870.chunk.js","sourcesContent":["import React from \"react\";\n\nconst styles = {\n    jumboStyle: {\n      background: \"purple\",\n      \n    }\n  };\n\nfunction Jumbotron() {\n  return (\n    <div style={styles.jumboStyle} className=\"jumbotron jumbotron-fluid\">\n        <div className=\"container\">\n            <h1 className=\"display-3 text-center text-white\">Employee Directory</h1>\n            <p className=\"lead text-center text-white\">This directory allows you to search for employees alphabetically or sort by department.</p>\n        </div>\n    </div>\n  );\n}\n\nexport default Jumbotron;","import React from \"react\";\nimport \"./style.css\"\n\nfunction Table (props) {\n    return (\n        <tbody>\n            <tr>\n            <th scope=\"row\"><img src={props.image}/></th>\n                <td> { props.name } </td>\n                <td> { props.department } </td>\n                <td> { props.phoneNumber } </td>\n            </tr>\n        </tbody>\n    );\n}\n\nexport default Table;","import React from \"react\";\nimport employees from \"../../employees.json\";\nimport Table from \"../Table\"\n\nclass App extends React.Component {\n  state = {\n    employees: employees,\n    allEmployees: employees,\n  };\n\n  filter = (event) => {\n    const department = event.target.value;\n    if (department !== '') {\n      this.setState({\n        employees: this.state.allEmployees.filter(employee => {\n          if (department !== employee.department) {\n            return false;\n          }\n          return true;\n        })\n      })\n    }\n    else {\n      this.setState({\n        employees: this.state.allEmployees\n      })\n    }\n  }\n\n  sort = (event) => {\n    const sortMethod = event.target.value;\n\n    if (sortMethod === 'alphabetical') {\n      this.setState({\n        employees: this.state.allEmployees.sort((employee1, employee2) => {\n          if (employee1.name > employee2.name) {\n            return 1;\n          }\n          if (employee1.name < employee2.name) {\n            return -1;\n          }\n\n          return 0;\n        })\n      })\n    } else {\n      this.setState({\n        employees: this.state.allEmployees.sort((employee1, employee2) => {\n          if (employee1.name < employee2.name) {\n            return 1;\n          }\n          if (employee1.name > employee2.name) {\n            return -1;\n          }\n\n          return 0;\n        })\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n          <label>Filter by Department</label>\n          <select onChange={this.filter}>\n            <option />\n            <option value=\"Accounting\">Accounting</option>\n            <option value=\"Collections\">Collections</option>\n            <option value=\"Engineering\">Engineering</option>\n            <option value=\"Sales\">Sales</option>\n          </select>\n        </div>\n        <div>\n          <label>Sort by Name</label>\n          <select onChange={this.sort}>\n            <option />\n            <option value=\"alphabetical\">Alphabetical</option>\n            <option value=\"reverse\">Reverse</option>\n          </select>\n        </div>\n\n        {/* {this.state.employees.map(employee => (\n          <div key={employee.id}>\n            <p>{employee.name}: {employee.department}</p>\n          </div>\n        ))} */}\n        <table className=\"table table-striped\">\n            <thead>\n                <tr>\n                <th scope=\"col\">Image</th>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Department</th>\n                <th scope=\"col\">Number</th>\n                </tr>\n            </thead>\n            {this.state.employees.map(employee => (\n            <Table\n                key={ employee.id }\n                image={employee.image }\n                name={ employee.name }\n                department={ employee.department }\n                phoneNumber={ employee.phoneNumber }\n            />\n            ))}\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport Jumbotron from \"./components/Jumbotron\";\nimport TableData from \"./components/TableData\"\n\n\n\n\nfunction App() {\n  return (\n    <div>\n      <Jumbotron />\n      <div className=\"container\">\n        <TableData />\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}